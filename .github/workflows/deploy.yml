name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2 via Bastion
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.BASTION_HOST }}
          proxy_username: ${{ secrets.BASTION_USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_port: 22
          script: |
            echo "ECR 로그인..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            echo "이전 컨테이너 종료..."
            docker-compose -f docker-compose.prod.yml down
            
            echo "환경 변수 파일 생성..."
            cat <<EOF > .env
            DB_URL=jdbc:mysql://db:3306/mega_crew?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DDL_AUTO=update
            REDIS_HOST=redis
            REDIS_PORT=6379
            REDIS_DATABASE=0
            REDIS_TIMEOUT=1000
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=86400000
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            AI_SERVER_BASE_URL=${{ secrets.AI_SERVER_BASE_URL }}
            AI_SERVER_TIMEOUT=5000
            AI_SERVER_MAX_RETRIES=3
            AI_SERVER_MAX_POOLS=100
            SL_API_KEY=${{ secrets.SL_API_KEY }}
            SL_API_URL=${{ secrets.SL_API_URL }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            IMAGE_TAG=${{ github.sha }}
            AWS_REGION=${{ env.AWS_REGION }}
            ADMIN_SIGNUP_CODE=${{ secrets.ADMIN_SIGNUP_CODE }}
            MAX_FILE_SIZE=15MB
            MAX_REQUEST_SIZE=15MB
            EOF
            
            echo "최신 이미지 가져오기 및 컨테이너 시작..."
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
            
            echo "배포 대기 중..."
            sleep 30
            
            echo "컨테이너 상태 확인..."
            docker-compose -f docker-compose.prod.yml ps
            
            echo "헬스체크 실행..."
            max_attempts=6
            attempt=1
            wait_time=10
            
            while [ $attempt -le $max_attempts ]; do
              echo "헬스체크 시도 $attempt/$max_attempts..."
            
              if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
                if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
                  echo "배포 성공!"
                  break
                fi
              fi
            
              if [ $attempt -eq $max_attempts ]; then
                echo "헬스체크 타임아웃. 로그 확인:"
                docker-compose -f docker-compose.prod.yml logs --tail=50 app
                exit 1
              fi
            
              sleep $wait_time
              attempt=$((attempt + 1))
            done
            
            echo "Docker 리소스 정리..."
            docker system prune -f
            
            echo "배포 완료!"