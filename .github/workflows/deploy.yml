# GitHub Actions 워크플로우: Spring Boot CI/CD
# main 브랜치에 푸시될 때마다 애플리케이션 빌드, ECR에 도커 이미지 푸시, EC2에 배포를 자동화합니다.

name: Build and Deploy to EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우가 실행됩니다.

env:
  # AWS 및 Docker 관련 환경 변수 설정
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      # 1. 코드 체크아웃
      # GitHub 리포지토리의 코드를 Runner에 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 설정 (Spring Boot 애플리케이션 빌드를 위해)
      # Java 17을 설치합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      # 3. Gradle 권한 부여
      # Gradle 실행 파일에 실행 권한을 부여합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle로 프로젝트 빌드
      # Gradle Wrapper를 사용하여 프로젝트를 빌드합니다.
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. AWS 자격 증명 설정
      # AWS IAM 사용자의 자격 증명을 사용하여 AWS 환경을 구성합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. ECR 로그인
      # ECR에 도커 이미지를 푸시하기 위해 인증합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 7. 도커 이미지 빌드 및 ECR 푸시
      # 프로젝트의 JAR 파일을 기반으로 도커 이미지를 빌드하고 ECR에 업로드합니다.
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # 고유한 커밋 해시를 태그로 사용
        run: |
          # Dockerfile을 사용하여 이미지 빌드 (main 브랜치에만 해당)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # ECR에 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 8. SSH를 사용하여 EC2에 접속 및 배포
      # EC2 인스턴스에 SSH로 접속하여 배포 스크립트를 실행합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # ECR에 로그인 (EC2 인스턴스 IAM 역할에 ECR 접근 권한 필수)
            echo "ECR 로그인 시도..."
            sudo aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            # Docker Compose를 사용하여 서비스 종료
            echo "이전 컨테이너 종료..."
            sudo docker-compose -f docker-compose.prod.yml down
            
            # .env 파일 생성 및 업데이트 (깃허브 시크릿 값 사용)
            echo "환경 변수 파일 생성/업데이트..."
            cat <<EOF > .env
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            AI_SERVER_BASE_URL=${{ secrets.AI_SERVER_BASE_URL }}
            SL_API_KEY=${{ secrets.SL_API_KEY }}
            SL_API_URL=${{ secrets.SL_API_URL }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_S3_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
            AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            IMAGE_TAG=${{ github.sha }}
            EOF
            
            # 최신 이미지 가져오기 및 컨테이너 재시작
            echo "최신 이미지 가져오기 및 컨테이너 시작..."
            sudo docker-compose -f docker-compose.prod.yml pull
            sudo docker-compose -f docker-compose.prod.yml up -d --force-recreate
