services:
  app:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG:-latest}
    container_name: mega-crew-app-prod
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-prod
      - SPRING_SQL_INIT_MODE=never
      - DB_URL=jdbc:mysql://db:3306/mega_crew?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
      - DB_USERNAME=${DB_USERNAME:-root}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DDL_AUTO=${DDL_AUTO:-update}
      - SHOW_SQL=${SHOW_SQL:-false}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DATABASE=${REDIS_DATABASE:-0}
      - REDIS_TIMEOUT=${REDIS_TIMEOUT:-1000}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - AI_SERVER_BASE_URL=${AI_SERVER_BASE_URL}
      - AI_SERVER_TIMEOUT=${AI_SERVER_TIMEOUT:-5000}
      - AI_SERVER_MAX_RETRIES=${AI_SERVER_MAX_RETRIES:-3}
      - AI_SERVER_MAX_POOLS=${AI_SERVER_MAX_POOLS:-100}
      - SL_API_KEY=${SL_API_KEY}
      - SL_API_URL=${SL_API_URL}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-15MB}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-15MB}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
      - ADMIN_SIGNUP_CODE=${ADMIN_SIGNUP_CODE:-MEGACREW_ADMIN_DEFAULT}

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

    volumes:
      - ./logs:/app/logs  # 수정: 상대 경로 사용

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

    networks:
      - app-network

    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  db:
    image: mysql:8.0
    container_name: mega-crew-db-prod
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-time-zone='+09:00'
      --innodb-buffer-pool-size=512M
      --max-connections=200
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=mega_crew
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
      - TZ=Asia/Seoul

    ports:
      - "3306:3306"  # 주석 해제 (필요시 ALB 헬스체크용)

    volumes:
      - mysql-data:/var/lib/mysql  # 수정: named volume 사용

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

    networks:
      - app-network

    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: mega-crew-redis-prod
    command: redis-server --appendonly yes

    volumes:
      - redis-data:/data  # 수정: named volume 사용

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    networks:
      - app-network

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

networks:
  app-network:
    driver: bridge

# Named volumes 사용 (데이터 영속성 보장)
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local