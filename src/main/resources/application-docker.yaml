# application-docker.yml
# 도커 컨테이너 환경용 Spring Boot 설정 파일

# ===== 서버 설정 =====
server:
  port: ${APPLICATION_SERVER_PORT:8080}
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# ===== Spring 설정 =====
spring:
  # ===== 애플리케이션 설정 =====
  application:
    name: mega-crew-backend

  # ===== SQL 초기화 설정 =====
  sql:
    init:
      mode: never  # 운영환경에서 data.sql 실행 방지

  # ===== 데이터베이스 설정 (MySQL) =====
  datasource:
    url: ${DB_URL:jdbc:mysql://db:3306/mega_crew?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  # ===== JPA/Hibernate 설정 =====
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 100

  # ===== Redis 설정 =====
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:1000}ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # ===== 파일 업로드 설정 =====
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:15MB}
      max-request-size: ${MAX_REQUEST_SIZE:15MB}
      enabled: true

  # ===== 메시지 설정 =====
  messages:
    basename: messages
    encoding: UTF-8

  # ===== 캐시 설정 =====
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10분

  # ===== OAuth2 설정 =====
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - name
              - email
            client-name: Naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - account_email
            client-name: Kakao

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# ===== JWT 설정 =====
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}  # 24시간 (밀리초)

# ===== 애플리케이션 설정 =====
app:
  frontend:
    url: ${FRONTEND_URL:https://korean-signlanguage-sudam.com}

# ===== CORS 설정 =====
cors:
  allowed-origins: ${CORS_ORIGINS:https://korean-signlanguage-sudam.com,http://localhost:3000,http://127.0.0.1:3000}

# ===== 관리자 설정 =====
application:
  admin:
    signup:
      code: ${ADMIN_SIGNUP_CODE:-MEGACREW_ADMIN_DEFAULT}

# ===== AI 서버 설정 (환경변수명 통일) =====
ai:
  server:
    base-url: ${AI_SERVER_BASE_URL:http://3.34.168.10:5000}
    endpoint: ${AI_SERVER_ENDPOINT:/analyze-frame}
    timeout: ${AI_SERVER_TIMEOUT:5000}
    max-retries: ${AI_SERVER_MAX_RETRIES:3}
    max-pools: ${AI_SERVER_MAX_POOLS:100}

# ===== 수화 API 설정 =====
sl:
  api:
    key: ${SL_API_KEY}
    url: ${SL_API_URL}

# ===== 프레임 검증 설정 =====
frame:
  validation:
    max-size-mb: ${FRAME_MAX_SIZE_MB:10}
    min-size-kb: ${FRAME_MIN_SIZE_KB:1}
    max-timestamp-diff-minutes: ${FRAME_MAX_TIMESTAMP_DIFF_MINUTES:5}

# ===== AWS 설정 =====
aws:
  s3:
    bucket-name: ${S3_BUCKET_NAME}
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}
    region: ${AWS_REGION:ap-northeast-2}

# ===== 액추에이터 설정 (모니터링) =====
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  health:
    redis:
      enabled: true
    db:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

# ===== 로깅 설정 =====
logging:
  level:
    org:
      example:
        mega_crew: INFO
      springframework:
        web: INFO
        security: INFO
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
    com:
      zaxxer:
        hikari: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/application.log
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 30
      total-size-cap: 3GB

# ===== Swagger/OpenAPI 설정 =====
springdoc:
  api-docs:
    path: /v3/api-docs  # 표준 경로로 변경
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: alpha
    tags-sorter: alpha
    display-request-duration: true
    doc-expansion: none
    config-url: /v3/api-docs/swagger-config  # 명시적 설정 추가

# ===== 프로파일별 추가 설정 =====
---
spring:
  config:
    activate:
      on-profile: docker-dev

logging:
  level:
    org:
      example:
        mega_crew: DEBUG
      springframework:
        web: DEBUG
    root: INFO

management:
  endpoint:
    health:
      show-details: always

---
spring:
  config:
    activate:
      on-profile: docker-prod

logging:
  level:
    org:
      example:
        mega_crew: WARN
      springframework:
        web: WARN
    root: WARN

management:
  endpoint:
    health:
      show-details: never
  endpoints:
    web:
      exposure:
        include: health,info