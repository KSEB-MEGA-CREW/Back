# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: 8080
  compression:
    enabled: true
  error:
    whitelabel:
      enabled: true

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
app:
  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}
  base-url: ${BASE_URL:http://localhost:8080}

# =============================================================================
# SECURITY & JWT CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}

spring:
  main:
    allow-circular-references: true

  # ===========================================================================
  # DATABASE INITIALIZATION (data.sql 사용을 위한 설정)
  # ===========================================================================
  sql:
    init:
       mode: always  # 항상 data.sql 실행 (개발용: always, 운영용: never)
       encoding: utf-8

  # ===========================================================================
  # OAUTH2 CONFIGURATION
  # ===========================================================================
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Google

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-authentication-method: none
            scope:
              - profile_nickname
              - account_email
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            authorization-grant-type: authorization_code
            client-name: kakao

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  # ===========================================================================
  # DATABASE CONFIGURATION
  # ===========================================================================
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000

  # ===========================================================================
  # JPA CONFIGURATION
  # ===========================================================================
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: ${SHOW_SQL:false}
    defer-datasource-initialization: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # ===========================================================================
  # REDIS CONFIGURATION
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 3000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # ===========================================================================
  # FILE UPLOAD CONFIGURATION
  # ===========================================================================
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:100MB}
      max-request-size: ${MAX_REQUEST_SIZE:100MB}

# =============================================================================
# API DOCUMENTATION CONFIGURATION
# =============================================================================
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html

# =============================================================================
# EXTERNAL API CONFIGURATION
# =============================================================================
# Sign Language API
sign:
  api:
    key: ${SL_API_KEY}
    url: ${SL_API_URL}

# AI Server 설정 (환경변수명 통일)
ai:
  server:
    translation:
      base-url: ${AI_SERVER_URL:http://localhost:8000}
      endpoint: /translate/text-to-sign
      timeout: 10000
      max-retries: 1


# =============================================================================
# CORS CONFIGURATION
# =============================================================================
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    org.example.mega_crew: ${LOG_LEVEL_APP:DEBUG}
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    org.springframework.security.oauth2: ${LOG_LEVEL_OAUTH2:DEBUG}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:TRACE}
    org.springframework.web.client.RestTemplate: ${LOG_LEVEL_HTTP:DEBUG}
    org.example.mega_crew.domain.signlanguage.service: ${LOG_LEVEL_AI:DEBUG}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%5level]) %cyan(%logger{36}) - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# =============================================================================
# SETTING HISTORY SCHEDULING
# =============================================================================
task:
  scheduling:
    pool:
      size: 2

# =============================================================================
# SETTING HISTORY
# =============================================================================
history:
  retention:
    expiration-days: 30
    cleanup-days: 7
    max-records-per-user: 100

# =============================================================================
# ADMIN SIGNUP SETTING
# =============================================================================
application:
  admin:
    signup:
      code: ${ADMIN_SIGNUP_CODE}