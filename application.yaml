# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: 8080
  compression:
    enabled: true
  error:
    whitelabel:
      enabled: true # 개발환경에서는 에러 페이지 표시

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
app:
  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}
  base-url: ${BASE_URL:http://localhost:8080}

# =============================================================================
# SECURITY & JWT CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET:mySecretKeyForJwtTokenGenerationAndValidation12345678901234567890}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour

spring:
  # ===========================================================================
  # MAIN CONFIGURATION
  # ===========================================================================
  main:
    allow-circular-references: true

  # ===========================================================================
  # OAUTH2 CONFIGURATION
  # ===========================================================================
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Google

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-authentication-method: none
            scope:
              - profile_nickname
              - account_email
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            authorization-grant-type: authorization_code
            client-name: kakao

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id



  # ===========================================================================
  # DATABASE CONFIGURATION
  # ===========================================================================
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10} # 개발환경용 pool size 추후 증대 필요
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000

  # ===========================================================================
  # JPA CONFIGURATION
  # ===========================================================================
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:create} # 개발: create, 운영: validate
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # ===========================================================================
  # REDIS CONFIGURATION (수정된 부분)
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379} # MySQL과 충돌 방지 6379 => 표준 Redis 포트
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 3000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # ===========================================================================
  # SESSION CONFIGURATION (수정된 부분)
  # ===========================================================================
  session:
    store-type: redis
    timeout: 30m
    redis:
      namespace: spring:session

  # ===========================================================================
  # FILE UPLOAD CONFIGURATION
  # ===========================================================================
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

# =============================================================================
# API DOCUMENTATION CONFIGURATION
# =============================================================================
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    config-url: /v3/api-docs/swagger-config
    url: /v3/api-docs
    disable-swagger-default-url: true
  show-actuator: false
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

# =============================================================================
# EXTERNAL API CONFIGURATION
# =============================================================================
# Sign Language API
sign:
  api:
    key: ${SL_API_KEY}
    url: ${SL_API_URL}

# AI Server
ai:
  server:
    base-url: ${AI_SERVER_URL} # ml server의 ec2의 public ip로 변경
    endpoint: /analyze-frame
    timeout: 5000
    maxRetrites: 3

# =============================================================================
# CORS CONFIGURATION
# =============================================================================
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000,http://127.0.0.1:8080}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600

# =============================================================================
# CUSTOM SESSION CONFIGURATION
# =============================================================================
session:
  timeout-minutes: 30
  cleanup-interval: 5

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    org.springframework.security.oauth2: ${LOG_LEVEL_OAUTH2:DEBUG}
    org.example.mega_crew: ${LOG_LEVEL_APP:DEBUG}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%5level]) %cyan(%logger{36}) - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# =============================================================================
# AWS S3 SETTING
# =============================================================================
aws:
  access-key: ${AWS_ACCESS_KEY}
  secret-key: ${AWS_SECRET_KEY}
  region: ap-northeast-2
  s3:
    bucket: ${S3_BUCKET_NAME}
